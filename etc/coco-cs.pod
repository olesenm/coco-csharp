=for comment
This document is in Pod format which can be converted with a Pod formatter,
such as "pod2text" or "pod2man".

=head1 NAME
X<coco-cs> X<Compiler Generator>

coco-cs - The Compiler Generator Coco/R, C# version.

=head1 SYNOPSIS

coco-cs [OPTION] Grammar.atg

=head1 DESCRIPTION

Coco/R is a compiler generator, which takes an attributed grammar of a
source language and generates a scanner and a parser for this
language. The scanner works as a deterministic finite automaton. The
parser uses recursive descent. LL(1) conflicts can be resolved by a
multi-symbol lookahead or by semantic checks. Thus the class of
accepted grammars is LL(k) for an arbitrary k.

=head2 Options

=over 5

=item -namespace NAME

Specifies the namespace for enclosing the generated code. Nested
namespaces can be specified, eg, C<< My.Name.Space >>

=item -prefix NAME

Specified a prefix for the generated Parser/Scanner file names. This
can be used to ensure unique output file names when several different
grammars are involved.

=item -frames DIR

Specifies an alternative location for frames, when they are not in the
source directory.

=item -trace STRING

Trace with output to the trace.txt file. Valid trace string values are
listed below.

=item -trace2 STRING

As per C<< -trace >> but with output on stderr.

=item -o DIR

The output directory for the generated files.

=item -bak

Save existing Parser/Scanner files as .bak

=item -version

Exit immediately after displaying the program version information.
This can be useful to check that a minimum version of Coco/R is being
used.

=item -help

Simple usage information.

=back


=head1 Frames

The Scanner.frame and Parser.frame must be located in one of these
directories:

=over 5

=item 1.

In the specified -frames directory.

=item 2.

The current directory.

=item 3.

The same directory as the atg grammar itself.

=item 4.

The share directory relative to the executable: ../share/coco-cs (non-Windows)

=back

Unless specified with the C<< -o >> option, the generated scanner/parser
files are written in the same directory as the atg grammar!


=head1 Trace output options

 - 0 | A: prints the states of the scanner automaton
 - 1 | F: prints the First and Follow sets of all nonterminals
 - 2 | G: prints the syntax graph of the productions
 - 3 | I: traces the computation of the First sets
 - 4 | J: prints the sets associated with ANYs and synchronisation sets
 - 6 | S: prints the symbol table (terminals, nonterminals, pragmas)
 - 7 | X: prints a cross reference list of all syntax symbols
 - 8 | P: prints statistics about the Coco run
 - 9    : unused

The trace output can be switched on as a command-line option or by the
pragma:

    $ { digit | letter }

in the attributed grammar.

The extended directive format may also be used in the attributed grammar:

    $trace=(digit | letter){ digit | letter }


=head1 Compiler Directives (Extended Pragmas)

To improve the reliability of builds in complex environments, it is
possible to specify the desired namespace and/or file prefix as a
directive within the grammar. For example, when compiling the
Coco-cs.atg itself, it can be compiled within the 'Coco' namespace
as specified on the command-line. For example,

    coco-cs -namespace Coco Coco-cs.atg

As an alternative, it can be specified within the Coco-cs.atg file:

    COMPILER Coco
    $namespace=Coco

The C<< -prefix >> command-line option can be similarly specified. For
example,

    COMPILER GramA
    $namespace=MyProj:GramA
    $prefix=GramA

    COMPILER GramB
    $namespace=MyProj:GramB
    $prefix=GramB

would generate the scanner/parser files in the respective namespaces,
but with these names:

    GramAParser.cs
    GramAScanner.cs

    GramBParser.cs
    GramBScanner.cs

The resulting scanner/parsers are separated not only in the
namespace, but also on the filesystem.

For completeness, it is also possible to add in trace string parameters
with the same syntax. For example,

    COMPILER GramC
    $trace=ags


=head1 SEE ALSO

coco-doc(1) for examples

http://www.ssw.uni-linz.ac.at/coco/ for more information


=head1 AUTHOR

Hanspeter Moessenboeck, extended by M. Loeberbauer and A. Woess.

Various improvements by Pat Terry, Mark Olesen.

=cut
